# ENV VARS CONFIGURATION
# Do not use `~` in the path to identify the home
# Do not configure MySql if you are using Hypersonic

# export LR_DEV_HOME="/Users/username/works/liferay"
# export LR_VERSION=7.1
# export LR_FOLDER=7.1
# export LR_PORT_PREFIX=71
# export LR_TOMCAT_VERSION=9.0.17
# export LR_PROFILE="portal"
# export LR_GOGO_PORT=11311
# export LR_RAM=3G
# export LR_DB_USER="liferay"
# export LR_DB_PASSWORD="liferay"
# export LR_DB_DATABASE="liferay_commerce"

alias lr="cd $LR_DEV_HOME"  # Go to Liferay home
alias lr-start="_lr-check-env && _lr-log-clean && _lr-configure && _lr-start && _lr-log"  # Start Liferay portal
alias lr-log="_lr-check-env && _lr-log"  # Tail log file
alias lr-shutdown="_lr-check-env && _lr-shutdown"  # Shutdown Liferay Portal
alias lr-deploy="_lr-deploy"  # Deploy the current folder
alias lr-deploy-profile="_lr-deploy-profile"  # Deploy the current folder
alias lr-sf="_lr-sf"  # Run source formatting in the current folder
alias lr-translate="_lr-translate"  # Run translation service in the current folder
alias lr-gogo="_lr-gogo"  # Open Gogo shell
alias lr-cleanup="_lr-check-env && _lr-cleanup && _lr-mysql-clean"  # Cleanup bundle state folders and DB
alias lr-configure="_lr-check-env && _lr-configure"  # Setup tomcat with ports and memory

RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
DEFAULT='\033[39m\033[0m'
ITALIC='\033[3m'

function _lr-start() {
  _lr-log-task "üöÄ  STARTING LIFERAY"
  [ ! -z "$LR_DB_DATABASE" ] && _lr-mysql-start
  _lr-execute \
    "cd $LR_DEV_HOME/$LR_FOLDER" \
    "sh ./bundles/tomcat-$LR_TOMCAT_VERSION/bin/startup.sh" \
    "cd -"
}

function _lr-shutdown() {
  _lr-log-task "‚úã  SHUTTING DOWN LIFERAY"
  _lr-execute \
    "cd $LR_DEV_HOME/$LR_FOLDER" \
    "sh ./bundles/tomcat-$LR_TOMCAT_VERSION/bin/shutdown.sh" \
    "cd -"
}

function _lr-deploy() {
  PROFILE_PARAM=$([ -z "$1" ] && echo "" || echo " -Dbuild.profile=$1")
  _lr-log-task "üöÇ  DEPLOYING"
  _lr-execute "blade gw deploy --parallel$PROFILE_PARAM"
}

function _lr-sf() {
  _lr-log-task "üí°  FORMATTING SOURCES"
  _lr-execute "blade gw formatSource"
}

function _lr-translate() {
  MS_KEY=$([ -z "$MS_TRANSLATOR_KEY" ] && echo "" || echo " -Pmicrosoft.translator.subscription.key=$MS_TRANSLATOR_KEY")
  _lr-log-task "üåé  TRANSLATE"
  _lr-execute "blade gw buildLang$MS_KEY"
}

function _lr-gogo() {
  TELNET_PORT=$([ -z "$LR_GOGO_PORT" ] && echo "11311" || echo "$LR_GOGO_PORT")
  _lr-log-task "‚å®Ô∏è  ACCESSING GOGO SHELL"
  _lr-execute "telnet localhost $TELNET_PORT"
}


function _lr-log {
  _lr-log-task "üìù  PRINTING LOG"
  _lr-execute "tail -f -n 200 $LR_DEV_HOME/$LR_FOLDER/bundles/tomcat-$LR_TOMCAT_VERSION/logs/catalina.out"
}

function _lr-log-clean {
  _lr-log-task "üßΩ  REMOVING LOG"
  _lr-execute "cp /dev/null $LR_DEV_HOME/$LR_FOLDER/bundles/tomcat-$LR_TOMCAT_VERSION/logs/catalina.out"
}

function _lr-cleanup {
  _lr-log-task "üßπ  DELETING work, state and data"
  _lr-execute \
    "cd $LR_DEV_HOME/$LR_FOLDER" \
    "rm -rf ./bundles/data ./bundles/work ./bundles/osgi/state" \
    "cd -"
}

function _lr-configure {
  _LR_MEM_RE="s/Xmx[0-9]*[a-zA-Z]/Xmx${LR_RAM}/g"
  _LR_PORT1_RE="s/port=\"[0-9][0-9]80\"/port=\"${LR_PORT_PREFIX}80\"/g"
  _LR_PORT2_RE="s/port=\"[0-9][0-9]05\"/port=\"${LR_PORT_PREFIX}05\"/g"

  _lr-log-task "üåà  CONFIGURING"
  _lr-execute \
    "cd $LR_DEV_HOME/$LR_FOLDER/bundles/tomcat-$LR_TOMCAT_VERSION" \
    "sed -i.bkp -e $_LR_PORT1_RE -e $_LR_PORT2_RE ./conf/server.xml" \
    "sed -i.bkp -e $_LR_MEM_RE ./bin/setenv.sh" \
    "cd -"
}

function _lr-check-env {
  if [ -z "$LR_VERSION" ] || [ -z "$LR_TOMCAT_VERSION" ]
  then
    _lr-log-error "üî¥  Not in a Liferay ENV"
    return 1
  fi
}

function _lr-mysql-start() {
  if [ "$(pgrep mysql | wc -l)" -ne 1 ];
  then
    _lr-log-task "üê¨  STARTING MYSQL"
    _lr-execute "mysql.server start"
  fi
}

function _lr-mysql-clean() {
  if [ ! -z "$LR_DB_USER" ] && [ ! -z "$LR_DB_PASSWORD" ] && [ ! -z "$LR_DB_DATABASE" ]
  then
    _lr-log-task "üóë  DROPPING DATABASE"
    mysql -u $LR_DB_USER -p$LR_DB_PASSWORD << END
drop database $LR_DB_DATABASE;
create database $LR_DB_DATABASE;
END
  fi
}

function _lr-execute {
  # set -x
  for i; do 
    _lr-log-command "$i"
    $i
  done
  # set +x
  echo ""
}

function _lr-log-error {
  echo -e "$RED$1$DEFAULT"
}

function _lr-log-task {
  echo -e "$GREEN[$1]$DEFAULT"
}

function _lr-log-command {
  echo -e "$ $YELLOW$ITALIC$1$DEFAULT"
}
